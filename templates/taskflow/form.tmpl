{{define "taskflow/form.tmpl"}}
{{template "header" .}}
{{template "common/alert.tmpl" .}}

<div>
  <!-- 页面标题 -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0">
      <i class="bi bi-diagram-3 me-2"></i>{{if .IsEdit}}{{.Name}} - 属性编辑{{else}}新建任务流{{end}}
    </h1>
    <a href="/task-flows" class="btn btn-outline-secondary">
      <i class="bi bi-arrow-left me-1"></i>返回列表
    </a>
  </div>

  <form method="post" action="/task-flows{{if .IsEdit}}/{{.FlowID}}{{end}}" id="taskflowForm">
    {{if .IsEdit}}
    <input type="hidden" name="_method" value="PUT">
    {{end}}
    
    <!-- 基本信息 -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="card-title mb-0">
          <i class="bi bi-info-circle me-2"></i>基本信息
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <label for="name" class="form-label">任务流名称 <span class="text-danger">*</span></label>
            <input type="text" 
                   class="form-control" 
                   id="name" 
                   name="name" 
                   value="{{if .IsEdit}}{{.Name}}{{end}}"
                   placeholder="daily_data_sync"
                   required>
            <div class="form-text">建议使用有意义的名称，例如：daily_data_sync</div>
          </div>
          <div class="col-md-6">
            <label for="cron_expr" class="form-label">CRON 表达式 <span class="text-danger">*</span></label>
            <input type="text" 
                   class="form-control" 
                   id="cron_expr" 
                   name="cron_expr" 
                   value="{{if .IsEdit}}{{.CronExpr}}{{end}}"
                   placeholder="0 0 2 * * *"
                   required>
            <div class="form-text">6位格式：秒 分钟 小时 日期 月份 星期，例如：0 0 2 * * * (每天凌晨2点)</div>
          </div>
        </div>
        
        <div class="row mt-3">
          <div class="col-md-6">
            <label for="description" class="form-label">描述</label>
            <textarea class="form-control" 
                      id="description" 
                      name="description" 
                      rows="8"
                      placeholder="任务流描述...">{{if .IsEdit}}{{.Description}}{{end}}</textarea>
          </div>
          <div class="col-md-6">
            <div class="card">
              <div class="card-body">
                <h6 class="card-title">CRON 表达式构建器</h6>
                
                <div class="row g-2">
                  <div class="col-md-2">
                    <label class="form-label small">秒</label>
                    <input type="text" class="form-control form-control-sm" id="second" value="0" placeholder="0">
                  </div>
                  <div class="col-md-2">
                    <label class="form-label small">分钟</label>
                    <input type="text" class="form-control form-control-sm" id="minute" value="0" placeholder="0">
                  </div>
                  <div class="col-md-2">
                    <label class="form-label small">小时</label>
                    <input type="text" class="form-control form-control-sm" id="hour" value="2" placeholder="2">
                  </div>
                  <div class="col-md-2">
                    <label class="form-label small">日期</label>
                    <input type="text" class="form-control form-control-sm" id="day" value="*" placeholder="*">
                  </div>
                  <div class="col-md-2">
                    <label class="form-label small">月份</label>
                    <input type="text" class="form-control form-control-sm" id="month" value="*" placeholder="*">
                  </div>
                  <div class="col-md-2">
                    <label class="form-label small">星期</label>
                    <input type="text" class="form-control form-control-sm" id="weekday" value="*" placeholder="*">
                  </div>
                </div>
                
                <div class="mt-2">
                  <small class="text-muted">
                    支持: * ? 数字 1-5 1,3,5 */10 等CRON语法
                  </small>
                </div>
                
                <div class="mt-3">
                  <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary btn-sm" onclick="generateCron()">
                      <i class="bi bi-arrow-clockwise me-1"></i>生成表达式
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="{{if .IsEdit}}resetToOriginalCron(){{else}}clearCronBuilder(){{end}}">
                      <i class="bi bi-x-circle me-1"></i>{{if .IsEdit}}重置{{else}}清空{{end}}
                    </button>
                  </div>
                  <div class="mt-2">
                    <small class="text-muted">
                      生成的表达式：<code id="generatedCron">{{if .IsEdit}}{{.CronExpr}}{{else}}0 0 2 * * *{{end}}</code>
                    </small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 操作按钮 -->
    <div class="d-flex justify-content-end gap-2">
      <button type="button" 
              class="btn btn-secondary" 
              onclick="history.back()">
        <i class="bi bi-x-circle me-1"></i>取消
      </button>
      <button type="submit" 
              class="btn btn-primary">
        <i class="bi bi-check me-1"></i>{{if .IsEdit}}更新{{else}}创建{{end}}
      </button>
    </div>
  </form>
</div>

<script>
// 表单验证
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('taskflowForm');
  
  // 初始化CRON构建器
  initializeCronBuilder();
  
  
  form.addEventListener('submit', function(e) {
    const name = document.getElementById('name').value.trim();
    const cronExpr = document.getElementById('cron_expr').value.trim();
    
    if (!name) {
      e.preventDefault();
      showAlert('请输入任务流名称', 'warning');
      return;
    }
    
    if (!cronExpr) {
      e.preventDefault();
      showAlert('请输入 CRON 表达式', 'warning');
      return;
    }
    
    // 完整的 CRON 表达式验证
    const validation = validateCronExpression(cronExpr);
    if (!validation.valid) {
      e.preventDefault();
      showAlert(validation.message, 'warning');
      return;
    }
  });
});

// ==================== CRON 表达式验证 ====================
function validateCronExpression(cronExpr) {
  // 基本格式检查：6个字段，用空格分隔（支持秒的cron格式）
  const parts = cronExpr.trim().split(/\s+/);
  if (parts.length !== 6) {
    return {
      valid: false,
      message: 'CRON 表达式必须包含6个字段：秒 分钟 小时 日期 月份 星期'
    };
  }
  
  const [second, minute, hour, day, month, weekday] = parts;
  
  // 验证秒 (0-59)
  if (!validateCronField(second, 0, 59, '秒')) {
    return {
      valid: false,
      message: '秒字段无效，应为 0-59 或 *'
    };
  }
  
  // 验证分钟 (0-59)
  if (!validateCronField(minute, 0, 59, '分钟')) {
    return {
      valid: false,
      message: '分钟字段无效，应为 0-59 或 *'
    };
  }
  
  // 验证小时 (0-23)
  if (!validateCronField(hour, 0, 23, '小时')) {
    return {
      valid: false,
      message: '小时字段无效，应为 0-23 或 *'
    };
  }
  
  // 验证日期 (1-31)
  if (!validateCronField(day, 1, 31, '日期')) {
    return {
      valid: false,
      message: '日期字段无效，应为 1-31 或 *'
    };
  }
  
  // 验证月份 (1-12)
  if (!validateCronField(month, 1, 12, '月份')) {
    return {
      valid: false,
      message: '月份字段无效，应为 1-12 或 *'
    };
  }
  
  // 验证星期 (0-7, 0和7都表示周日)
  if (!validateCronField(weekday, 0, 7, '星期')) {
    return {
      valid: false,
      message: '星期字段无效，应为 0-7 或 * (0和7都表示周日)'
    };
  }
  
  // 检查日期和星期的冲突
  if (day !== '*' && day !== '?' && weekday !== '*' && weekday !== '?') {
    return {
      valid: false,
      message: '日期和星期不能同时指定具体值，其中一个必须为 * 或 ?'
    };
  }
  
  return { valid: true, message: '' };
}

function validateCronField(field, min, max, fieldName) {
  // 允许的值：* ? 数字 数字-数字 数字,数字 数字/数字
  const cronPattern = /^(\*|\?|\d+(-\d+)?(,\d+(-\d+)?)*(\/\d+)?)$/;
  
  if (!cronPattern.test(field)) {
    return false;
  }
  
  // 如果是 * 或 ?，直接通过
  if (field === '*' || field === '?') {
    return true;
  }
  
  // 解析复杂表达式
  const parts = field.split(',');
  for (const part of parts) {
    if (!validateCronFieldPart(part, min, max)) {
      return false;
    }
  }
  
  return true;
}

function validateCronFieldPart(part, min, max) {
  // 处理步长表达式 (如 */5, 1-10/2)
  const stepMatch = part.match(/^(.+)\/(\d+)$/);
  if (stepMatch) {
    const range = stepMatch[1];
    const step = parseInt(stepMatch[2]);
    
    if (step <= 0) {
      return false;
    }
    
    // 验证范围部分
    if (range === '*') {
      return true; // */5 是有效的
    }
    
    return validateCronFieldPart(range, min, max);
  }
  
  // 处理范围表达式 (如 1-10)
  const rangeMatch = part.match(/^(\d+)-(\d+)$/);
  if (rangeMatch) {
    const start = parseInt(rangeMatch[1]);
    const end = parseInt(rangeMatch[2]);
    
    return start >= min && start <= max && 
           end >= min && end <= max && 
           start <= end;
  }
  
  // 处理单个数字
  const num = parseInt(part);
  return !isNaN(num) && num >= min && num <= max;
}


// ==================== CRON 构建器功能 ====================
function initializeCronBuilder() {
  // 为所有输入框添加事件监听
  const inputs = ['second', 'minute', 'hour', 'day', 'month', 'weekday'];
  inputs.forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener('input', updateCronPreview);
    }
  });
  
  // 编辑模式下，从后端数据初始化构建器
  {{if .IsEdit}}
  initializeFromExistingCron('{{.CronExpr}}');
  {{else}}
  // 新建模式下，使用默认值
  updateCronPreview();
  {{end}}
}

// 从现有 CRON 表达式初始化构建器
function initializeFromExistingCron(cronExpr) {
  if (!cronExpr || cronExpr.trim() === '') {
    updateCronPreview();
    return;
  }
  
  const parts = cronExpr.trim().split(/\s+/);
  if (parts.length !== 6) {
    console.warn('Invalid CRON expression format:', cronExpr);
    updateCronPreview();
    return;
  }
  
  const [second, minute, hour, day, month, weekday] = parts;
  
  // 填充各个字段
  document.getElementById('second').value = second || '0';
  document.getElementById('minute').value = minute || '0';
  document.getElementById('hour').value = hour || '2';
  document.getElementById('day').value = day || '*';
  document.getElementById('month').value = month || '*';
  document.getElementById('weekday').value = weekday || '*';
  
  // 更新预览
  updateCronPreview();
}

function generateCron() {
  const second = document.getElementById('second').value.trim() || '0';
  const minute = document.getElementById('minute').value.trim() || '0';
  const hour = document.getElementById('hour').value.trim() || '2';
  const day = document.getElementById('day').value.trim() || '*';
  const month = document.getElementById('month').value.trim() || '*';
  const weekday = document.getElementById('weekday').value.trim() || '*';
  
  const cronExpr = `${second} ${minute} ${hour} ${day} ${month} ${weekday}`;
  
  // 更新输入框
  const cronInput = document.getElementById('cron_expr');
  cronInput.value = cronExpr;

  
  // 更新预览
  document.getElementById('generatedCron').textContent = cronExpr;
  
  // 简单验证
  const validation = validateCronExpression(cronExpr);
  if (validation.valid) {
    showAlert('CRON 表达式已生成', 'success');
  } else {
    showAlert('生成的表达式有误: ' + validation.message, 'warning');
  }
}

function clearCronBuilder() {
  // 重置所有输入框
  document.getElementById('second').value = '0';
  document.getElementById('minute').value = '0';
  document.getElementById('hour').value = '2';
  document.getElementById('day').value = '*';
  document.getElementById('month').value = '*';
  document.getElementById('weekday').value = '*';
  
  // 更新预览
  updateCronPreview();
}

// 重置为原始值（编辑模式下使用）
function resetToOriginalCron() {
  {{if .IsEdit}}
  initializeFromExistingCron('{{.CronExpr}}');
  {{else}}
  clearCronBuilder();
  {{end}}
}

function updateCronPreview() {
  const second = document.getElementById('second').value;
  const minute = document.getElementById('minute').value;
  const hour = document.getElementById('hour').value;
  const day = document.getElementById('day').value;
  const month = document.getElementById('month').value;
  const weekday = document.getElementById('weekday').value;
  
  const cronExpr = `${second} ${minute} ${hour} ${day} ${month} ${weekday}`;
  document.getElementById('generatedCron').textContent = cronExpr;
}


</script>


{{template "footer" .}}
{{end}}