{{define "task_log/list.tmpl"}}
{{template "header" .}}

<div class="page">
  <div class="toolbar">
    <h1 class="h1">任务日志</h1>
    <div class="controls">
      <select id="statusFilter" aria-label="按状态筛选">
        <option value="">全部状态</option>
        <option value="success">成功</option>
        <option value="failed">失败</option>
        <option value="running">运行中</option>
        <option value="killed">已终止</option>
        <option value="pending">等待中</option>
        <option value="skipped">跳过</option>
      </select>
      <select id="executionTypeFilter" aria-label="按执行方式筛选">
        <option value="">全部类型</option>
        <option value="scheduled">调度执行</option>
        <option value="manual">手动执行</option>
      </select>
      <input type="text" id="taskNameFilter" placeholder="任务名称">
      <input type="date" id="dateFromFilter" placeholder="开始日期">
      <input type="date" id="dateToFilter" placeholder="结束日期">
      <button type="button" class="btn primary" onclick="searchTaskLogs()">搜索</button>
      <button type="button" class="btn" onclick="refreshTaskLogs()">重置</button>
    </div>
  </div>

  <div class="table-wrap">
    <table class="table" id="taskLogsTable">
      <thead>
        <tr>
          <th>ID</th>
          <th>任务名称</th>
          <th>状态</th>
          <th>执行方式</th>
          <th>开始时间</th>
          <th>结束时间</th>
          <th>持续时间</th>
          <th>操作</th>
        </tr>
      </thead>
      <tbody id="taskLogsTableBody">
        <!-- 数据将通过JavaScript动态加载 -->
      </tbody>
    </table>
  </div>

  <!-- 分页 -->
  <div class="pagination-info" id="taskLogsInfo">
    <!-- 分页信息 -->
  </div>
  <div class="pagination" id="taskLogsPagination">
    <!-- 分页按钮 -->
  </div>
</div>


<script>
let currentTaskLogPage = 1;
let currentTaskLogPageSize = 20;
let currentTaskLogTotal = 0;

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', function() {
    // 设置默认日期为今天
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('dateFromFilter').value = today;
    document.getElementById('dateToFilter').value = today;
    
    loadTaskLogs();
    
    // 所有筛选条件都需要手动点击搜索按钮
    const filters = ['statusFilter', 'executionTypeFilter', 'taskNameFilter', 'dateFromFilter', 'dateToFilter'];
    filters.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('change', function() {
                // 只重置页码，不自动搜索
                currentTaskLogPage = 1;
            });
        }
    });
});

// 加载任务日志列表
function loadTaskLogs() {
    const params = new URLSearchParams({
        page: currentTaskLogPage,
        page_size: currentTaskLogPageSize,
        status: document.getElementById('statusFilter').value,
        execution_type: document.getElementById('executionTypeFilter').value,
        task_name: document.getElementById('taskNameFilter').value,
        date_from: document.getElementById('dateFromFilter').value,
        date_to: document.getElementById('dateToFilter').value
    });

    fetch(`/api/task-logs?${params}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderTaskLogsTable(data.data.logs || []);
                renderTaskLogsPagination(data.data);
            } else {
                alert('加载任务日志失败: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('加载任务日志失败');
        });
}

// 渲染任务日志表格
function renderTaskLogsTable(logs) {
    const tbody = document.getElementById('taskLogsTableBody');
    tbody.innerHTML = '';

    if (!logs || logs.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center">暂无数据</td></tr>';
        return;
    }

    logs.forEach(log => {
        const statusBadge = getStatusBadge(log.status);
        const executionTypeBadge = getExecutionTypeBadge(log.execution_type);
        const startTime = formatDateTime(log.start_time);
        const endTime = log.end_time ? formatDateTime(log.end_time) : '-';
        const duration = log.duration || '-';

        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${log.id}</td>
            <td>${log.task_name || '未知任务'}</td>
            <td>${statusBadge}</td>
            <td>${executionTypeBadge}</td>
            <td>${startTime}</td>
            <td>${endTime}</td>
            <td>${duration}</td>
            <td>
                <a href="/task-logs/${log.id}" class="btn">详情</a>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// 渲染分页
function renderTaskLogsPagination(data) {
    currentTaskLogTotal = data.total;
    const totalPages = data.total_pages;
    
    // 更新分页信息
    const start = (data.page - 1) * data.page_size + 1;
    const end = Math.min(data.page * data.page_size, data.total);
    document.getElementById('taskLogsInfo').textContent = `显示第 ${start} 到 ${end} 条，共 ${data.total} 条记录`;

    // 渲染分页按钮
    const pagination = document.getElementById('taskLogsPagination');
    pagination.innerHTML = '';

    if (totalPages <= 1) return;

    // 上一页
    const prevDisabled = data.page <= 1 ? 'disabled' : '';
    const prevLink = document.createElement('a');
    prevLink.className = `paginate_button previous ${prevDisabled}`;
    prevLink.textContent = '上一页';
    prevLink.onclick = () => changeTaskLogPage(data.page - 1);
    pagination.appendChild(prevLink);

    // 页码
    const startPage = Math.max(1, data.page - 2);
    const endPage = Math.min(totalPages, data.page + 2);

    for (let i = startPage; i <= endPage; i++) {
        const active = i === data.page ? 'current' : '';
        const pageLink = document.createElement('a');
        pageLink.className = `paginate_button ${active}`;
        pageLink.textContent = i;
        pageLink.onclick = () => changeTaskLogPage(i);
        pagination.appendChild(pageLink);
    }

    // 下一页
    const nextDisabled = data.page >= totalPages ? 'disabled' : '';
    const nextLink = document.createElement('a');
    nextLink.className = `paginate_button next ${nextDisabled}`;
    nextLink.textContent = '下一页';
    nextLink.onclick = () => changeTaskLogPage(data.page + 1);
    pagination.appendChild(nextLink);
}

// 切换页面
function changeTaskLogPage(page) {
    if (page < 1 || page > Math.ceil(currentTaskLogTotal / currentTaskLogPageSize)) return;
    currentTaskLogPage = page;
    loadTaskLogs();
}

// 搜索任务日志
function searchTaskLogs() {
    currentTaskLogPage = 1;
    loadTaskLogs();
}

// 重置任务日志筛选条件
function refreshTaskLogs() {
    // 重置所有筛选条件
    document.getElementById('statusFilter').value = '';
    document.getElementById('executionTypeFilter').value = '';
    document.getElementById('taskNameFilter').value = '';
    
    // 重置日期为今天
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('dateFromFilter').value = today;
    document.getElementById('dateToFilter').value = today;
    
    // 重置页码并加载数据
    currentTaskLogPage = 1;
    loadTaskLogs();
}




// 获取状态徽章
function getStatusBadge(status) {
    const badges = {
        'success': '<span class="badge badge-success">成功</span>',
        'failed': '<span class="badge badge-danger">失败</span>',
        'running': '<span class="badge badge-warning">运行中</span>',
        'killed': '<span class="badge badge-secondary">已终止</span>',
        'pending': '<span class="badge badge-info">等待中</span>',
        'skipped': '<span class="badge badge-light">跳过</span>'
    };
    return badges[status] || '<span class="badge badge-secondary">未知</span>';
}

// 获取执行方式徽章
function getExecutionTypeBadge(type) {
    const badges = {
        'scheduled': '<span class="badge badge-primary">调度执行</span>',
        'manual': '<span class="badge badge-info">手动执行</span>'
    };
    return badges[type] || '<span class="badge badge-secondary">未知</span>';
}

// 格式化日期时间
function formatDateTime(dateTimeStr) {
    if (!dateTimeStr) return '-';
    const date = new Date(dateTimeStr);
    // 强制转换为UTC+8时区显示
    return date.toLocaleString('zh-CN', {
        timeZone: 'Asia/Shanghai',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
}

// HTML转义
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
</script>

{{template "footer" .}}
{{end}}
