{{define "task_log/detail.tmpl"}}
{{template "header" .}}
{{template "common/alert.tmpl" .}}

<div>
  <!-- 页面标题 -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0">
      <i class="bi bi-file-text me-2"></i>任务执行详情
    </h1>
    <a href="/task-logs" class="btn btn-outline-secondary">
      <i class="bi bi-arrow-left me-1"></i>返回列表
    </a>
  </div>

  <!-- 任务信息 -->
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="card-title mb-0">
        <i class="bi bi-info-circle me-2"></i>任务信息
      </h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <p><strong>任务ID:</strong> {{.Log.TaskID}}</p>
          <p><strong>任务名称:</strong> {{.Log.TaskName}}</p>
          <p><strong>状态:</strong> 
            <span class="badge bg-{{if eq .Log.Status "success"}}success{{else if eq .Log.Status "failed"}}danger{{else if eq .Log.Status "running"}}primary{{else if eq .Log.Status "killed"}}warning{{else if eq .Log.Status "pending"}}secondary{{else if eq .Log.Status "skipped"}}info{{else}}secondary{{end}}">
              {{if eq .Log.Status "success"}}成功{{else if eq .Log.Status "failed"}}失败{{else if eq .Log.Status "running"}}运行中{{else if eq .Log.Status "killed"}}已终止{{else if eq .Log.Status "pending"}}等待中{{else if eq .Log.Status "skipped"}}跳过{{else}}{{.Log.Status}}{{end}}
            </span>
          </p>
        </div>
        <div class="col-md-6">
          <p><strong>开始时间:</strong> {{.Log.StartTime}}</p>
          <p><strong>结束时间:</strong> {{if .Log.EndTime}}{{.Log.EndTime}}{{else}}-{{end}}</p>
          <p><strong>持续时间:</strong> {{if .Log.Duration}}{{.Log.Duration}}{{else}}-{{end}}</p>
        </div>
      </div>
    </div>
  </div>

  <!-- 执行日志 -->
  <div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="card-title mb-0">
        <i class="bi bi-terminal me-2"></i>执行日志
      </h5>
      <div class="btn-group btn-group-sm">
        <button type="button" 
                class="btn btn-outline-secondary" 
                onclick="copyLogContent()">
          <i class="bi bi-clipboard me-1"></i>复制
        </button>
        <button type="button" 
                class="btn btn-outline-secondary" 
                onclick="refreshLog()">
          <i class="bi bi-arrow-clockwise me-1"></i>刷新
        </button>
      </div>
    </div>
    <div class="card-body p-0">
      <div id="logContent" 
           class="bg-dark text-light p-3" 
           style="height: 500px; overflow-y: auto; font-family: 'Courier New', monospace; font-size: 14px; line-height: 1.4;">
        {{.Log.Content}}
      </div>
    </div>
  </div>
</div>

<script>
let logContent = '';

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', function() {
  logContent = document.getElementById('logContent').textContent;
  
  // 如果是运行中的任务，自动刷新
  const status = '{{.Log.Status}}';
  if (status === 'running') {
    setInterval(refreshLog, 5000); // 每5秒刷新一次
  }
});

function copyLogContent() {
  if (!logContent) {
    showAlert('没有可复制的内容', 'warning');
    return;
  }
  
  navigator.clipboard.writeText(logContent).then(() => {
    showAlert('已复制到剪贴板', 'success');
  }).catch(() => {
    showAlert('复制失败', 'danger');
  });
}

function refreshLog() {
  const logId = '{{.Log.ID}}';
  
  fetch(`/api/task-logs/${logId}`)
    .then(response => response.json())
    .then(data => {
      if (data.content) {
        logContent = data.content;
        document.getElementById('logContent').textContent = data.content;
        
        // 滚动到底部
        const logElement = document.getElementById('logContent');
        logElement.scrollTop = logElement.scrollHeight;
      }
    })
    .catch(error => {
      console.error('刷新日志失败:', error);
      showAlert('刷新日志失败', 'danger');
    });
}


// 状态处理函数
function getStatusBadgeClass(status) {
  const statusMap = {
    'success': 'success',
    'failed': 'danger',
    'running': 'primary',
    'killed': 'warning',
    'pending': 'secondary',
    'skipped': 'info'
  };
  return statusMap[status] || 'secondary';
}

function getStatusText(status) {
  const statusMap = {
    'success': '成功',
    'failed': '失败',
    'running': '运行中',
    'killed': '已终止',
    'pending': '等待中',
    'skipped': '跳过'
  };
  return statusMap[status] || status;
}
</script>


{{template "footer" .}}
{{end}}